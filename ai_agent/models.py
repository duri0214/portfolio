from django.db import models


class GooglemapsReview(models.Model):
    """
    Represents a Google Maps review for a specific location.

    Attributes:
        location_name (str): Name of the place being reviewed.
        review_text (str): Content of the review.
        rating (float): Rating given by the reviewer (1-5).
        author_name (str): Name of the reviewer (optional).
        review_date (datetime): Date when the review was posted.
        latitude (float): Latitude of the reviewed location.
        longitude (float): Longitude of the reviewed location.
        vector (binary): Vector representation generated by Chroma (optional).
    """

    location_name = models.CharField(max_length=255)
    review_text = models.TextField()
    rating = models.FloatField()
    author_name = models.CharField(max_length=255, blank=True, null=True)
    review_date = models.DateTimeField()
    latitude = models.FloatField()
    longitude = models.FloatField()
    vector = models.BinaryField(null=True, blank=True)

    def __str__(self):
        return f"{self.location_name} - {self.rating} stars"


class Entity(models.Model):
    """
    Represents an entity involved in conversations and defines its behavior.

    This model is used to define conversation participants, each with specific reasoning
    mechanisms, restrictions, and additional attributes for dynamic behavior in a system.

    Attributes:
        name (str): The name of the entity (e.g., a bot or user).
        thinking_type (str): The reasoning or decision-making type associated with the entity.
            Choices:
                - "google_maps_based" (Google Mapsレビューに基づく)
                - "rag_based" (RAGベースの推論)
                - "ng_word_based" (NGワードに基づく制限)
        forbidden_keywords (str, optional): A list of keywords that the entity should avoid,
            typically used with "ng_word_based" reasoning.
        vector (binary, optional): A binary vector representation of the entity's attributes,
            commonly used for embedding-based reasoning with "rag_based".
        speed (int): The decision-making speed or response speed of the entity, where
            higher values may indicate slower response times.
    """

    THINKING_TYPE_CHOICES = (
        ("google_maps_based", "Google Mapsレビューに基づく"),  # Type A
        ("rag_based", "RAGベースの推論"),  # Type B
        ("ng_word_based", "NGワードに基づく制限"),  # Type C
    )

    name = models.CharField(max_length=100)
    thinking_type = models.CharField(
        max_length=50, choices=THINKING_TYPE_CHOICES, default="google_maps_based"
    )
    forbidden_keywords = models.TextField(blank=True, null=True)  # Type C用
    vector = models.BinaryField(null=True, blank=True)  # Type B用
    speed = models.IntegerField(default=10)

    def __str__(self):
        return f"{self.name} ({self.get_thinking_type_display()})"


class Message(models.Model):
    """
    Represents a message in a conversation.

    Attributes:
        entity (Entity): The entity that sent the message.
        message_content (str): Content of the message.
        created_at (datetime): Timestamp when the message was created.
        updated_at (datetime): Timestamp when the message was last updated.
    """

    entity = models.ForeignKey(Entity, on_delete=models.CASCADE)
    message_content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Message from {self.entity.name} at {self.created_at}"


class ActionTimeline(models.Model):
    """
    Tracks the next turn for each entity based on their speed.
    """

    entity = models.OneToOneField(Entity, on_delete=models.CASCADE)
    next_turn = models.FloatField(default=0)
    can_act = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.entity.name} - Next Turn: {self.next_turn}"


class ActionHistory(models.Model):
    entity = models.ForeignKey(Entity, on_delete=models.CASCADE)
    acted_at_turn = models.FloatField()
    created_at = models.DateTimeField(auto_now_add=True)
