from django.db import models


class GooglemapsReview(models.Model):
    """
    Represents a Google Maps review for a specific location.

    Attributes:
        location_name (str): Name of the place being reviewed.
        review_text (str): Content of the review.
        rating (float): Rating given by the reviewer (1-5).
        author_name (str): Name of the reviewer (optional).
        review_date (datetime): Date when the review was posted.
        latitude (float): Latitude of the reviewed location.
        longitude (float): Longitude of the reviewed location.
        vector (binary): Vector representation generated by Chroma (optional).
    """

    location_name = models.CharField(max_length=255)
    review_text = models.TextField()
    rating = models.FloatField()
    author_name = models.CharField(max_length=255, blank=True, null=True)
    review_date = models.DateTimeField()
    latitude = models.FloatField()
    longitude = models.FloatField()
    vector = models.BinaryField(null=True, blank=True)

    def __str__(self):
        return f"{self.location_name} - {self.rating} stars"


class Entity(models.Model):
    """
    Represents an entity involved in conversations (e.g., A, B, C).

    Attributes:
        name (str): Name of the entity.
        forbidden_keywords (str): List of forbidden keywords for the entity (optional).
        vector (binary): Vector representation generated by Chroma (optional).
    """

    name = models.CharField(max_length=100)
    forbidden_keywords = models.TextField(blank=True, null=True)
    vector = models.BinaryField(null=True, blank=True)

    def __str__(self):
        return self.name


class Message(models.Model):
    """
    Represents a message in a conversation.

    Attributes:
        entity (Entity): The entity that sent the message.
        message_content (str): Content of the message.
        created_at (datetime): Timestamp when the message was created.
        updated_at (datetime): Timestamp when the message was last updated.
    """

    entity = models.ForeignKey(Entity, on_delete=models.CASCADE)
    message_content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Message from {self.entity.name} at {self.created_at}"
